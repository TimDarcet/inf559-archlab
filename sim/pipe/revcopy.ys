#/* $begin revcopy-ys */
##################################################################
# revcopy.ys
#
# Copy a src block of len words to dst in reverse order.
# Return the number of positive words (>0) contained in src.
#
# Timothee Darcet timothee.darcet
#
# Use iaddq to use less registers
# Reformulate conditional jumps to be taken as often as possible (since the pipe simulator supposes they are taken)
#
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# %rbx: tmp storage
# %rax: count
# You can modify this portion
		# Loop header
		addq %rdx, %rdx			# %rdx = 2 * len
		# nop
		jg Next			    	# if > 0 , skip ret
		ret
Next: 	addq %rdx, %rdx			# %rdx = 4 * len
		irmovq $0, %rax			# count = 0;
		# nop
		addq %rdx, %rdx			# %rdx = 8 * len
		iaddq $-8, %rsi			# Adjust offset
		# nop
		# nop
		addq %rdx, %rsi			# %rsi is at the end of word
ULoop:	iaddq $-16, %rdx	# len--
		jge UStep1				# if there are still things to copy, skip jmp
		jmp Betw
UStep1:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle UStep2				# if so, goto UStep2: (skip count++)
		iaddq $1, %rax			# count++
UStep2:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
# 		jle UStep3				# if so, goto UStep2: (skip count++)
# 		iaddq $1, %rax			# count++
# UStep3:	mrmovq (%rdi), %rbx	# read val from src...
# 		iaddq $8, %rdi			# src++
# 		# nop
# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
# 		iaddq $-8, %rsi			# dst--
# 		andq %rbx, %rbx			# val <= 0?
# 		jle UStep4				# if so, goto UStep2: (skip count++)
# 		iaddq $1, %rax			# count++
# UStep4:	mrmovq (%rdi), %rbx	# read val from src...
# 		iaddq $8, %rdi			# src++
# 		# nop
# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
# 		iaddq $-8, %rsi			# dst--
# 		andq %rbx, %rbx			# val <= 0?
# 		jle UStep5				# if so, goto UStep2: (skip count++)
# 		iaddq $1, %rax			# count++
# UStep5:	mrmovq (%rdi), %rbx	# read val from src...
# 		iaddq $8, %rdi			# src++
# 		# nop
# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
# 		iaddq $-8, %rsi			# dst--
# 		andq %rbx, %rbx			# val <= 0?
		jle Ufin				# if so, goto Ufin: (skip count++)
		iaddq $1, %rax			# count++
Ufin:	jmp ULoop

Betw:	iaddq $16, %rdx
		andq %rdx, %rdx			# Test rdx > 0
		# nop
		jg FLoop			    	# if rdx > 0 , skip ret
		ret

FLoop:	mrmovq (%rdi), %rbx		# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle Ffin				# if so, goto Ffin: (skip count++)
		iaddq $1, %rax			# count++
Ffin:	iaddq $-8, %rdx			# len--
		jg FLoop				# if there are still things to copy, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end revcopy-ys */
