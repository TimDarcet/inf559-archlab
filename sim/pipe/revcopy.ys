#/* $begin revcopy-ys */
##################################################################
# revcopy.ys
#
# Copy a src block of len words to dst in reverse order.
# Return the number of positive words (>0) contained in src.
#
# Timothee Darcet timothee.darcet
#
# Use iaddq to use less registers
# Reformulate conditional jumps to be taken as often as possible (since the pipe simulator supposes they are taken)
#
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# %rbx: tmp storage
# %rax: count
# You can modify this portion
		# Loop header
		addq %rdx, %rdx			# %rdx = 2 * len
		iaddq $-8, %rsi			# Adjust offset
		# nop
Next: 	addq %rdx, %rdx			# %rdx = 4 * len
		irmovq $0, %rax			# count = 0;
		# nop
		addq %rdx, %rdx			# %rdx = 8 * len
		# nop
		# nop
		addq %rdx, %rsi			# %rsi is at the end of word
# First unrolling
ULoop:	iaddq $-56, %rdx	# len--
		jge UStep1				# if there are still things to copy, skip jmp
		jmp Betw1
UStep1:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		# nop
		andq %rbx, %rbx			# val <= 0?
		jle UStep2				# if so, goto UStep2: (skip count++)
		iaddq $1, %rax			# count++
UStep2:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle UStep3				# if so, goto UStep2: (skip count++)
		iaddq $1, %rax			# count++
UStep3:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle UStep4				# if so, goto UStep2: (skip count++)
		iaddq $1, %rax			# count++
UStep4:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle UStep5				# if so, goto UStep2: (skip count++)
		iaddq $1, %rax			# count++
UStep5:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle UStep6				# if so, goto UStep2: (skip count++)
		iaddq $1, %rax			# count++
UStep6:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle UStep7				# if so, goto UStep2: (skip count++)
		iaddq $1, %rax			# count++
UStep7:	mrmovq (%rdi), %rbx	# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep8				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep8:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep9				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep9:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep10				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep10:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep11				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep11:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep12				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep12:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep13				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep13:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep14				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep14:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle UStep15				# if so, goto UStep2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# UStep15:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
		jle Ufin				# if so, goto Ufin: (skip count++)
		iaddq $1, %rax			# count++
Ufin:	jmp ULoop

Betw1:	iaddq $56, %rdx
# Second unrolling
	# U2Loop:	iaddq $-24, %rdx	# len--
	# 		jge U2Step1				# if there are still things to copy, skip jmp
	# 		jmp Betw2
	# U2Step1:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step2				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step2:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step3				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step3:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step4				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step4:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step5				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step5:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step6				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step6:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step7				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step7:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step8				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step8:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step9				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step9:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step10				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step10:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step11				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step11:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step12				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step12:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step13				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step13:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step14				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step14:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2Step15				# if so, goto U2Step2: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2Step15:	mrmovq (%rdi), %rbx	# read val from src...
	# 		iaddq $8, %rdi			# src++
	# 		# nop
	# 		rmmovq %rbx, (%rsi)		# ...and store it to dst
	# 		iaddq $-8, %rsi			# dst--
	# 		andq %rbx, %rbx			# val <= 0?
	# 		jle U2fin				# if so, goto Ufin: (skip count++)
	# 		iaddq $1, %rax			# count++
	# U2fin:	jmp U2Loop

	# Betw2:	iaddq $24, %rdx
		
		andq %rdx, %rdx			# Test rdx > 0
		# nop
		jg FLoop			    	# if rdx > 0 , skip ret
		ret

# End loop
FLoop:	mrmovq (%rdi), %rbx		# read val from src...
		iaddq $8, %rdi			# src++
		# nop
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		iaddq $-8, %rsi			# dst--
		andq %rbx, %rbx			# val <= 0?
		jle Ffin				# if so, goto Ffin: (skip count++)
		iaddq $1, %rax			# count++
Ffin:	iaddq $-8, %rdx			# len--
		jg FLoop				# if there are still things to copy, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end revcopy-ys */
